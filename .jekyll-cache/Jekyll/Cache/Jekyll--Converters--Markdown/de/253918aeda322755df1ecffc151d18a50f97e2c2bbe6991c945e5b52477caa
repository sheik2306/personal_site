I"B<h2 id="adding-recaptcha-to-contact-form">Adding Recaptcha to Contact Form</h2>

<h3 id="amazon-services-api-gateway---lamda-function---sns">Amazon services API Gateway - Lamda Function - SNS</h3>

<p>https://www.google.com/recaptcha</p>

<p>Get a secret and site key on google/recaptcha.</p>

<p>For a serverless method subscribe to an SNS AWS notification</p>

<ol>
  <li>Create new topic <code class="language-plaintext highlighter-rouge">recaptcha</code></li>
  <li><code class="language-plaintext highlighter-rouge">Create subscription -&gt; Protocol: Email</code> with the email you wish to receive notifications from</li>
</ol>

<p><a href="https://aws.amazon.com/blogs/architecture/create-dynamic-contact-forms-for-s3-static-websites-using-aws-lambda-amazon-api-gateway-and-amazon-ses/">!Link</a></p>

<p>Create an AWS account, search for <code class="language-plaintext highlighter-rouge">lamda</code> - &gt; <code class="language-plaintext highlighter-rouge">create function</code> -&gt; from <code class="language-plaintext highlighter-rouge">blueprint</code> -&gt; <code class="language-plaintext highlighter-rouge">helloword</code> in node.js</p>

<p><mark>Important!</mark> Inside the created function to add policies (SES policy)</p>

<p>go to <code class="language-plaintext highlighter-rouge">Lamda -&gt; function -&gt; Configuration</code><br />
Left side panel will have Permissions, Click on role name and add policies: choose SES policy or create custom policy</p>

<p>Youâ€™ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>or</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">b</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>
<span class="kd">function</span> <span class="nx">sum</span> <span class="p">(</span><span class="nx">num1</span><span class="p">,</span><span class="nx">num2</span><span class="p">){</span>
  <span class="k">return</span> <span class="nx">num1</span><span class="o">+</span><span class="nx">num2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">sum</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span>
</code></pre></div></div>

:ET